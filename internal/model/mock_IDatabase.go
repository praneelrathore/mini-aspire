// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/personal/mini-aspire/internal/model (interfaces: IDatabase)

package model

import (
	pegomock "github.com/petergtz/pegomock/v4"
	"reflect"
	"time"
)

type MockIDatabase struct {
	fail func(message string, callerSkip ...int)
}

func NewMockIDatabase(options ...pegomock.Option) *MockIDatabase {
	mock := &MockIDatabase{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockIDatabase) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockIDatabase) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockIDatabase) AddAdmin(_param0 *Admin) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIDatabase().")
	}
	_params := []pegomock.Param{_param0}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("AddAdmin", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockIDatabase) AddLoanRequest(_param0 *LoanApplication) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIDatabase().")
	}
	_params := []pegomock.Param{_param0}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("AddLoanRequest", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockIDatabase) AddUser(_param0 *User) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIDatabase().")
	}
	_params := []pegomock.Param{_param0}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("AddUser", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockIDatabase) GetAdmin(_param0 map[string]interface{}) (*Admin, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIDatabase().")
	}
	_params := []pegomock.Param{_param0}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetAdmin", _params, []reflect.Type{reflect.TypeOf((**Admin)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *Admin
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*Admin)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockIDatabase) GetLoanDetails(_param0 uint64) (*LoanApplication, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIDatabase().")
	}
	_params := []pegomock.Param{_param0}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetLoanDetails", _params, []reflect.Type{reflect.TypeOf((**LoanApplication)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *LoanApplication
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*LoanApplication)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockIDatabase) GetLoans(_param0 map[string]interface{}) ([]*LoanApplication, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIDatabase().")
	}
	_params := []pegomock.Param{_param0}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetLoans", _params, []reflect.Type{reflect.TypeOf((*[]*LoanApplication)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 []*LoanApplication
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].([]*LoanApplication)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockIDatabase) GetUser(_param0 map[string]interface{}) (*User, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIDatabase().")
	}
	_params := []pegomock.Param{_param0}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetUser", _params, []reflect.Type{reflect.TypeOf((**User)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *User
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*User)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockIDatabase) UpdateLoanRepayment(_param0 map[string]interface{}, _param1 *LoanRepayment) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIDatabase().")
	}
	_params := []pegomock.Param{_param0, _param1}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("UpdateLoanRepayment", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockIDatabase) UpdateLoanRequest(_param0 *LoanApplication) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIDatabase().")
	}
	_params := []pegomock.Param{_param0}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("UpdateLoanRequest", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockIDatabase) VerifyWasCalledOnce() *VerifierMockIDatabase {
	return &VerifierMockIDatabase{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockIDatabase) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockIDatabase {
	return &VerifierMockIDatabase{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockIDatabase) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockIDatabase {
	return &VerifierMockIDatabase{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockIDatabase) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockIDatabase {
	return &VerifierMockIDatabase{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockIDatabase struct {
	mock                   *MockIDatabase
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockIDatabase) AddAdmin(_param0 *Admin) *MockIDatabase_AddAdmin_OngoingVerification {
	_params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AddAdmin", _params, verifier.timeout)
	return &MockIDatabase_AddAdmin_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIDatabase_AddAdmin_OngoingVerification struct {
	mock              *MockIDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIDatabase_AddAdmin_OngoingVerification) GetCapturedArguments() *Admin {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockIDatabase_AddAdmin_OngoingVerification) GetAllCapturedArguments() (_param0 []*Admin) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*Admin, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*Admin)
			}
		}
	}
	return
}

func (verifier *VerifierMockIDatabase) AddLoanRequest(_param0 *LoanApplication) *MockIDatabase_AddLoanRequest_OngoingVerification {
	_params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AddLoanRequest", _params, verifier.timeout)
	return &MockIDatabase_AddLoanRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIDatabase_AddLoanRequest_OngoingVerification struct {
	mock              *MockIDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIDatabase_AddLoanRequest_OngoingVerification) GetCapturedArguments() *LoanApplication {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockIDatabase_AddLoanRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*LoanApplication) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*LoanApplication, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*LoanApplication)
			}
		}
	}
	return
}

func (verifier *VerifierMockIDatabase) AddUser(_param0 *User) *MockIDatabase_AddUser_OngoingVerification {
	_params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AddUser", _params, verifier.timeout)
	return &MockIDatabase_AddUser_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIDatabase_AddUser_OngoingVerification struct {
	mock              *MockIDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIDatabase_AddUser_OngoingVerification) GetCapturedArguments() *User {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockIDatabase_AddUser_OngoingVerification) GetAllCapturedArguments() (_param0 []*User) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*User, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*User)
			}
		}
	}
	return
}

func (verifier *VerifierMockIDatabase) GetAdmin(_param0 map[string]interface{}) *MockIDatabase_GetAdmin_OngoingVerification {
	_params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetAdmin", _params, verifier.timeout)
	return &MockIDatabase_GetAdmin_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIDatabase_GetAdmin_OngoingVerification struct {
	mock              *MockIDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIDatabase_GetAdmin_OngoingVerification) GetCapturedArguments() map[string]interface{} {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockIDatabase_GetAdmin_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]interface{}) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]map[string]interface{}, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(map[string]interface{})
			}
		}
	}
	return
}

func (verifier *VerifierMockIDatabase) GetLoanDetails(_param0 uint64) *MockIDatabase_GetLoanDetails_OngoingVerification {
	_params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetLoanDetails", _params, verifier.timeout)
	return &MockIDatabase_GetLoanDetails_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIDatabase_GetLoanDetails_OngoingVerification struct {
	mock              *MockIDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIDatabase_GetLoanDetails_OngoingVerification) GetCapturedArguments() uint64 {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockIDatabase_GetLoanDetails_OngoingVerification) GetAllCapturedArguments() (_param0 []uint64) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]uint64, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(uint64)
			}
		}
	}
	return
}

func (verifier *VerifierMockIDatabase) GetLoans(_param0 map[string]interface{}) *MockIDatabase_GetLoans_OngoingVerification {
	_params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetLoans", _params, verifier.timeout)
	return &MockIDatabase_GetLoans_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIDatabase_GetLoans_OngoingVerification struct {
	mock              *MockIDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIDatabase_GetLoans_OngoingVerification) GetCapturedArguments() map[string]interface{} {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockIDatabase_GetLoans_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]interface{}) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]map[string]interface{}, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(map[string]interface{})
			}
		}
	}
	return
}

func (verifier *VerifierMockIDatabase) GetUser(_param0 map[string]interface{}) *MockIDatabase_GetUser_OngoingVerification {
	_params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetUser", _params, verifier.timeout)
	return &MockIDatabase_GetUser_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIDatabase_GetUser_OngoingVerification struct {
	mock              *MockIDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIDatabase_GetUser_OngoingVerification) GetCapturedArguments() map[string]interface{} {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockIDatabase_GetUser_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]interface{}) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]map[string]interface{}, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(map[string]interface{})
			}
		}
	}
	return
}

func (verifier *VerifierMockIDatabase) UpdateLoanRepayment(_param0 map[string]interface{}, _param1 *LoanRepayment) *MockIDatabase_UpdateLoanRepayment_OngoingVerification {
	_params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UpdateLoanRepayment", _params, verifier.timeout)
	return &MockIDatabase_UpdateLoanRepayment_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIDatabase_UpdateLoanRepayment_OngoingVerification struct {
	mock              *MockIDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIDatabase_UpdateLoanRepayment_OngoingVerification) GetCapturedArguments() (map[string]interface{}, *LoanRepayment) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockIDatabase_UpdateLoanRepayment_OngoingVerification) GetAllCapturedArguments() (_param0 []map[string]interface{}, _param1 []*LoanRepayment) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]map[string]interface{}, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(map[string]interface{})
			}
		}
		if len(_params) > 1 {
			_param1 = make([]*LoanRepayment, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(*LoanRepayment)
			}
		}
	}
	return
}

func (verifier *VerifierMockIDatabase) UpdateLoanRequest(_param0 *LoanApplication) *MockIDatabase_UpdateLoanRequest_OngoingVerification {
	_params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UpdateLoanRequest", _params, verifier.timeout)
	return &MockIDatabase_UpdateLoanRequest_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIDatabase_UpdateLoanRequest_OngoingVerification struct {
	mock              *MockIDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIDatabase_UpdateLoanRequest_OngoingVerification) GetCapturedArguments() *LoanApplication {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockIDatabase_UpdateLoanRequest_OngoingVerification) GetAllCapturedArguments() (_param0 []*LoanApplication) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*LoanApplication, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*LoanApplication)
			}
		}
	}
	return
}
