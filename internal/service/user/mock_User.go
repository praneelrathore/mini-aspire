// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/personal/mini-aspire/internal/service/user (interfaces: IUser)

package user

import (
	context "context"
	domains "github.com/personal/mini-aspire/internal/service/domains"
	mappers "github.com/personal/mini-aspire/internal/service/mappers"
	pegomock "github.com/petergtz/pegomock/v4"
	"reflect"
	"time"
)

type MockIUser struct {
	fail func(message string, callerSkip ...int)
}

func NewMockIUser(options ...pegomock.Option) *MockIUser {
	mock := &MockIUser{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockIUser) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockIUser) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockIUser) AddUser(_param0 context.Context, _param1 *mappers.UserRegistrationRequest) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIUser().")
	}
	_params := []pegomock.Param{_param0, _param1}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("AddUser", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockIUser) GetUser(_param0 context.Context, _param1 uint64) (*domains.User, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIUser().")
	}
	_params := []pegomock.Param{_param0, _param1}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetUser", _params, []reflect.Type{reflect.TypeOf((**domains.User)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *domains.User
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*domains.User)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockIUser) VerifyWasCalledOnce() *VerifierMockIUser {
	return &VerifierMockIUser{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockIUser) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockIUser {
	return &VerifierMockIUser{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockIUser) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockIUser {
	return &VerifierMockIUser{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockIUser) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockIUser {
	return &VerifierMockIUser{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockIUser struct {
	mock                   *MockIUser
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockIUser) AddUser(_param0 context.Context, _param1 *mappers.UserRegistrationRequest) *MockIUser_AddUser_OngoingVerification {
	_params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AddUser", _params, verifier.timeout)
	return &MockIUser_AddUser_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIUser_AddUser_OngoingVerification struct {
	mock              *MockIUser
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIUser_AddUser_OngoingVerification) GetCapturedArguments() (context.Context, *mappers.UserRegistrationRequest) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockIUser_AddUser_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*mappers.UserRegistrationRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]context.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(context.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]*mappers.UserRegistrationRequest, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(*mappers.UserRegistrationRequest)
			}
		}
	}
	return
}

func (verifier *VerifierMockIUser) GetUser(_param0 context.Context, _param1 uint64) *MockIUser_GetUser_OngoingVerification {
	_params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetUser", _params, verifier.timeout)
	return &MockIUser_GetUser_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIUser_GetUser_OngoingVerification struct {
	mock              *MockIUser
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIUser_GetUser_OngoingVerification) GetCapturedArguments() (context.Context, uint64) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockIUser_GetUser_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []uint64) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]context.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(context.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]uint64, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(uint64)
			}
		}
	}
	return
}
