// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/personal/mini-aspire/internal/service/admin (interfaces: IAdmin)

package admin

import (
	context "context"
	domains "github.com/personal/mini-aspire/internal/service/domains"
	mappers "github.com/personal/mini-aspire/internal/service/mappers"
	pegomock "github.com/petergtz/pegomock/v4"
	"reflect"
	"time"
)

type MockIAdmin struct {
	fail func(message string, callerSkip ...int)
}

func NewMockIAdmin(options ...pegomock.Option) *MockIAdmin {
	mock := &MockIAdmin{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockIAdmin) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockIAdmin) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockIAdmin) AddAdmin(_param0 context.Context, _param1 *mappers.AdminRegistrationRequest) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIAdmin().")
	}
	_params := []pegomock.Param{_param0, _param1}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("AddAdmin", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockIAdmin) GetAdmin(_param0 context.Context, _param1 uint64) (*domains.Admin, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIAdmin().")
	}
	_params := []pegomock.Param{_param0, _param1}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetAdmin", _params, []reflect.Type{reflect.TypeOf((**domains.Admin)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *domains.Admin
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*domains.Admin)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockIAdmin) GetSubmittedLoanRequests(_param0 context.Context, _param1 *mappers.AdminLoanRequest) ([]*mappers.LoanRequest, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIAdmin().")
	}
	_params := []pegomock.Param{_param0, _param1}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetSubmittedLoanRequests", _params, []reflect.Type{reflect.TypeOf((*[]*mappers.LoanRequest)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 []*mappers.LoanRequest
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].([]*mappers.LoanRequest)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockIAdmin) UpdateLoan(_param0 context.Context, _param1 *mappers.AdminLoanUpdateRequest) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockIAdmin().")
	}
	_params := []pegomock.Param{_param0, _param1}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("UpdateLoan", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockIAdmin) VerifyWasCalledOnce() *VerifierMockIAdmin {
	return &VerifierMockIAdmin{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockIAdmin) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockIAdmin {
	return &VerifierMockIAdmin{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockIAdmin) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockIAdmin {
	return &VerifierMockIAdmin{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockIAdmin) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockIAdmin {
	return &VerifierMockIAdmin{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockIAdmin struct {
	mock                   *MockIAdmin
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockIAdmin) AddAdmin(_param0 context.Context, _param1 *mappers.AdminRegistrationRequest) *MockIAdmin_AddAdmin_OngoingVerification {
	_params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AddAdmin", _params, verifier.timeout)
	return &MockIAdmin_AddAdmin_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIAdmin_AddAdmin_OngoingVerification struct {
	mock              *MockIAdmin
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIAdmin_AddAdmin_OngoingVerification) GetCapturedArguments() (context.Context, *mappers.AdminRegistrationRequest) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockIAdmin_AddAdmin_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*mappers.AdminRegistrationRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]context.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(context.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]*mappers.AdminRegistrationRequest, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(*mappers.AdminRegistrationRequest)
			}
		}
	}
	return
}

func (verifier *VerifierMockIAdmin) GetAdmin(_param0 context.Context, _param1 uint64) *MockIAdmin_GetAdmin_OngoingVerification {
	_params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetAdmin", _params, verifier.timeout)
	return &MockIAdmin_GetAdmin_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIAdmin_GetAdmin_OngoingVerification struct {
	mock              *MockIAdmin
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIAdmin_GetAdmin_OngoingVerification) GetCapturedArguments() (context.Context, uint64) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockIAdmin_GetAdmin_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []uint64) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]context.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(context.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]uint64, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(uint64)
			}
		}
	}
	return
}

func (verifier *VerifierMockIAdmin) GetSubmittedLoanRequests(_param0 context.Context, _param1 *mappers.AdminLoanRequest) *MockIAdmin_GetSubmittedLoanRequests_OngoingVerification {
	_params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetSubmittedLoanRequests", _params, verifier.timeout)
	return &MockIAdmin_GetSubmittedLoanRequests_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIAdmin_GetSubmittedLoanRequests_OngoingVerification struct {
	mock              *MockIAdmin
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIAdmin_GetSubmittedLoanRequests_OngoingVerification) GetCapturedArguments() (context.Context, *mappers.AdminLoanRequest) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockIAdmin_GetSubmittedLoanRequests_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*mappers.AdminLoanRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]context.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(context.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]*mappers.AdminLoanRequest, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(*mappers.AdminLoanRequest)
			}
		}
	}
	return
}

func (verifier *VerifierMockIAdmin) UpdateLoan(_param0 context.Context, _param1 *mappers.AdminLoanUpdateRequest) *MockIAdmin_UpdateLoan_OngoingVerification {
	_params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UpdateLoan", _params, verifier.timeout)
	return &MockIAdmin_UpdateLoan_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockIAdmin_UpdateLoan_OngoingVerification struct {
	mock              *MockIAdmin
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockIAdmin_UpdateLoan_OngoingVerification) GetCapturedArguments() (context.Context, *mappers.AdminLoanUpdateRequest) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockIAdmin_UpdateLoan_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*mappers.AdminLoanUpdateRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]context.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(context.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]*mappers.AdminLoanUpdateRequest, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(*mappers.AdminLoanUpdateRequest)
			}
		}
	}
	return
}
